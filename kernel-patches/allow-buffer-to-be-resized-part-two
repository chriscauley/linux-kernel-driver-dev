demo: allow buffer to be resized (part two)

From: Stephen M. Cameron <smcameron@yahoo.com>


---
 drivers/char/demo.c        |   20 ++++++++++++++++++++
 include/linux/demo_ioctl.h |    2 ++
 2 files changed, 22 insertions(+), 0 deletions(-)

diff --git a/drivers/char/demo.c b/drivers/char/demo.c
index 47e144f..e3e7124 100644
--- a/drivers/char/demo.c
+++ b/drivers/char/demo.c
@@ -12,6 +12,8 @@ MODULE_LICENSE("GPL");
 
 #define DRVNAME "demo"
 #define INITIAL_BUFFER_SIZE 1000
+#define MAX_BUFFER_SIZE 10000
+#define MIN_BUFFER_SIZE 100
 
 static struct demo_device {
 	struct platform_device *pdev;
@@ -46,6 +48,8 @@ static long demo_ioctl(struct file *fp, unsigned int cmd, unsigned long arg)
 {
 	unsigned char data;
 	unsigned long flags;
+	u32 newsize;
+	unsigned char *newbuffer;
 	void __user *argp = (void __user *)arg;
 
 	printk(KERN_WARNING "demo_ioctl called, cmd = 0x%08x\n", cmd);
@@ -60,6 +64,22 @@ static long demo_ioctl(struct file *fp, unsigned int cmd, unsigned long arg)
 		memset(d.data, data, d.buffersize);
 		spin_unlock_irqrestore(&d.lock, flags);
 		return 0;
+	case DEMO_RESIZE_BUFFER:
+		if (copy_from_user(&newsize, argp, sizeof(newsize)))
+			return -EINVAL;
+		if (newsize < MIN_BUFFER_SIZE ||
+			newsize > MAX_BUFFER_SIZE)
+			return -EINVAL;
+		newbuffer = kmalloc(newsize, GFP_KERNEL);
+		if (!newbuffer)
+			return -ENOMEM;
+		spin_lock_irqsave(&d.lock, flags);
+		kfree(d.data);
+		d.data = newbuffer;
+		d.buffersize = (int) newsize;
+		memset(d.data, 'z', d.buffersize);
+		spin_unlock_irqrestore(&d.lock, flags);
+		return 0;
 	default:
 		break;
 	}
diff --git a/include/linux/demo_ioctl.h b/include/linux/demo_ioctl.h
index b331be8..34cfbe7 100644
--- a/include/linux/demo_ioctl.h
+++ b/include/linux/demo_ioctl.h
@@ -3,10 +3,12 @@
 
 #include <linux/types.h>
 #include <linux/ioctl.h>
+#include <linux/types.h>
 
 #define DEMO_IOC_MAGIC 'x'
 
 #define DEMO_ZAP_BUFFER _IOW(DEMO_IOC_MAGIC, 1, unsigned char)
+#define DEMO_RESIZE_BUFFER _IOW(DEMO_IOC_MAGIC, 2, __u32)
 
 #endif
 
