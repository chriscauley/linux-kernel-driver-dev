Implement ioctl part two:  Allow the buffer to

From: Stephen M. Cameron <smcameron@yahoo.com>

be overwritten with any single character via a
call to ioctl.
---

 drivers/char/demo.c        |   19 ++++++++++++++++++-
 include/linux/demo_ioctl.h |   12 ++++++++++++
 2 files changed, 30 insertions(+), 1 deletions(-)
 create mode 100644 include/linux/demo_ioctl.h


diff --git a/drivers/char/demo.c b/drivers/char/demo.c
index 41b91da..34ab006 100644
--- a/drivers/char/demo.c
+++ b/drivers/char/demo.c
@@ -3,6 +3,7 @@
 #include <linux/file.h>
 #include <linux/fs.h>
 #include <linux/uaccess.h>
+#include <linux/demo_ioctl.h>
 
 MODULE_AUTHOR("Stephen M. Cameron <scameron@beardog.cce.hp.com>");
 MODULE_DESCRIPTION("Demo driver");
@@ -40,8 +41,24 @@ static struct file_operations demo_fops = {
 
 static long demo_ioctl(struct file *fp, unsigned int cmd, unsigned long arg)
 {
+	unsigned char data;
+	unsigned long flags;
+	void __user *argp = (void __user *)arg;
+
 	printk(KERN_WARNING "demo_ioctl called\n");
-	return 0;
+
+	switch (cmd) {
+	case DEMO_ZAP_BUFFER:
+		if (copy_from_user(&data, argp, 1))
+			return -EFAULT;
+		spin_lock_irqsave(&d.lock, flags);
+		memset(d.data, data, sizeof(d.data));
+		spin_unlock_irqrestore(&d.lock, flags);
+		return 0;
+	default:
+		break;
+	}
+	return -ENOTTY;
 }
 
 static int demo_open(struct inode *inode, struct file *filp)
diff --git a/include/linux/demo_ioctl.h b/include/linux/demo_ioctl.h
new file mode 100644
index 0000000..b331be8
--- /dev/null
+++ b/include/linux/demo_ioctl.h
@@ -0,0 +1,12 @@
+#ifndef DEMO_IOCTL_H
+#define DEMO_IOCTL_H
+
+#include <linux/types.h>
+#include <linux/ioctl.h>
+
+#define DEMO_IOC_MAGIC 'x'
+
+#define DEMO_ZAP_BUFFER _IOW(DEMO_IOC_MAGIC, 1, unsigned char)
+
+#endif
+
